{
  config,
  pkgs,
  lib,
  mkBorgJob,
  mkGlanceMonitor,
  mkMonitoringTarget,
  mkCaddyVirtualHost,
  ...
}:
with lib;
let
  cfg = config.homelab.services.hp_scanner;
  service = "hp_scanner";
in
{
  options.homelab.services.hp_scanner = {
    enable = mkEnableOption "Enable hp_scanner";
    port = mkOption {
      type = types.port;
      description = "port to use";
    };
  };

  config = mkIf cfg.enable {
    users.users.hp_scanner = {
      isSystemUser = true;
      uid = 978;
      group = "hp_scanner";
      home = "/var/lib/hp_scanner";
      createHome = true;
      homeMode = "755";
    };

    users.groups.hp_scanner.gid = 977;

    systemd.tmpfiles.rules = [
      "d /var/lib/hp_scanner 0755 hp_scanner hp_scanner -"
      "d /var/lib/hp_scanner/config 0755 hp_scanner hp_scanner -"
    ];

    # Containers
    virtualisation.oci-containers.containers."hp-scanner" = {
      image = "manuc66/node-hp-scan-to:1.8.0";
      environment = {
        "IP" = "192.168.2.56";
        "LABEL" = "scan";
        "PATTERN" = "\"scan\"_dd.mm.yyyy_hh:MM:ss";
        "PGID" = "1000";
        "PUID" = "1000";
        "TZ" = "America/Toronto";
      };
      volumes = [
        "${config.smb.paths.documents}/paperless/consume:/scan"
      ];
      ports = [ "${toString cfg.port}:3000/tcp" ];

      log-driver = "journald";
      extraOptions = [
        "--network-alias=hp_scanner"
        "--network=hp-scanner_default"
      ];
    };
    systemd.services."podman-hp-scanner" = {
      serviceConfig = {
        Restart = lib.mkOverride 90 "always";
      };
      after = [
        "podman-network-hp-scanner_default.service"
      ];
      requires = [
        "podman-network-hp-scanner_default.service"
      ];
      partOf = [
        "podman-compose-hp-scanner-root.target"
      ];
      wantedBy = [
        "podman-compose-hp-scanner-root.target"
      ];
    };

    # Networks
    systemd.services."podman-network-hp-scanner_default" = {
      path = [ pkgs.podman ];
      serviceConfig = {
        Type = "oneshot";
        RemainAfterExit = true;
        ExecStop = "podman network rm -f hp-scanner_default";
      };
      script = ''
        podman network inspect hp-scanner_default || podman network create hp-scanner_default
      '';
      partOf = [ "podman-compose-hp-scanner-root.target" ];
      wantedBy = [ "podman-compose-hp-scanner-root.target" ];
    };

    # Root service
    # When started, this will automatically create all resources and start
    # the containers. When stopped, this will teardown all resources.
    systemd.targets."podman-compose-hp-scanner-root" = {
      unitConfig = {
        Description = "Root target generated by compose2nix.";
      };
      wantedBy = [ "multi-user.target" ];
    };

    homelab.services.glance.monitorSites = [
      (mkGlanceMonitor {
        service = "scanner";
        icon = "di:printer";
      })
    ];

    homelab.monitoring.targets = [
      (mkMonitoringTarget { service = "scanner"; })
    ];

    services.caddy.virtualHosts = mkCaddyVirtualHost {
      service = "scanner";
      port = cfg.port;
    };

    services.borgbackup.jobs.hp_scanner = mkBorgJob {
      paths = "/var/lib/hp_scanner";
      services = "hp_scanner";
    };
  };
}
