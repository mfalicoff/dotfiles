{
  config,
  pkgs,
  lib,
  mkBorgJob,
  mkGlanceMonitor,
  mkMonitoringTarget,
  mkCaddyVirtualHost,
  ...
}:

with lib;
let
  cfg = config.homelab.services.byparr;
  service = "byparr";
in
{
  options.homelab.services.byparr = {
    enable = mkEnableOption "Enable byparr";
    port = mkOption {
      type = types.port;
      description = "port to use";
    };
  };

  config = mkIf cfg.enable {
    # Containers
    virtualisation.oci-containers.containers."byparr-byparr" = {
      image = "ghcr.io/thephaseless/byparr:camoufox";
      ports = [ "${toString cfg.port}:8191/tcp" ];
      log-driver = "journald";
      extraOptions = [
        "--network-alias=byparr"
        "--network=byparr_default"
        "--shm-size=2147483648"
      ];
    };
    systemd.services."podman-byparr-byparr" = {
      serviceConfig = {
        Restart = lib.mkOverride 90 "no";
      };
      after = [
        "podman-network-byparr_default.service"
      ];
      requires = [
        "podman-network-byparr_default.service"
      ];
      partOf = [
        "podman-compose-byparr-root.target"
      ];
      wantedBy = [
        "podman-compose-byparr-root.target"
      ];
    };

    # Networks
    systemd.services."podman-network-byparr_default" = {
      path = [ pkgs.podman ];
      serviceConfig = {
        Type = "oneshot";
        RemainAfterExit = true;
        ExecStop = "podman network rm -f byparr_default";
      };
      script = ''
        podman network inspect byparr_default || podman network create byparr_default
      '';
      partOf = [ "podman-compose-byparr-root.target" ];
      wantedBy = [ "podman-compose-byparr-root.target" ];
    };

    # Root service
    # When started, this will automatically create all resources and start
    # the containers. When stopped, this will teardown all resources.
    systemd.targets."podman-compose-byparr-root" = {
      unitConfig = {
        Description = "Root target generated by compose2nix.";
      };
      wantedBy = [ "multi-user.target" ];
    };

    homelab.services.glance.monitorSites = [
      (mkGlanceMonitor {
        service = "byparr";
        icon = "di:cloudflare";
      })
    ];

    homelab.monitoring.targets = [
      (mkMonitoringTarget { service = "byparr"; })
    ];

    services.caddy.virtualHosts = mkCaddyVirtualHost {
      service = "byparr";
      port = cfg.port;
    };

    services.borgbackup.jobs.byparr = mkBorgJob {
      paths = "/var/lib/byparr";
      services = "byparr";
    };
  };
}
