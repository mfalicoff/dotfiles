{
  config,
  pkgs,
  lib,
  mkBorgJob,
  mkGlanceMonitor,
  mkMonitoringTarget,
  mkCaddyVirtualHost,
  ...
}:
with lib;
let
  cfg = config.homelab.services.ownfoil;
  service = "ownfoil";
in
{
  options.homelab.services.ownfoil = {
    enable = mkEnableOption "Enable ownfoil";
    port = mkOption {
      type = types.port;
      description = "port to use";
    };
  };

  config = mkIf cfg.enable {
    users.users.ownfoil = {
      isSystemUser = true;
      uid = 989;
      group = "ownfoil";
      home = "/var/lib/ownfoil";
      createHome = true;
      homeMode = "755";
    };

    users.groups.ownfoil.gid = 985;

    systemd.tmpfiles.rules = [
      "d /var/lib/ownfoil 0755 ownfoil ownfoil -"
      "d /var/lib/ownfoil/config 0755 ownfoil ownfoil -"
    ];

    # Containers
    virtualisation.oci-containers.containers."ownfoil" = {
      image = "a1ex4/ownfoil:2.1.3";
      volumes = [
        "/var/lib/ownfoil/config:/app/config"
        "/mnt/media/games/bios/switch:/bios"
        "/mnt/media/games/roms/switch:/games"
      ];
      environment = {
        PUID = "989";
        PGID = "985";
      };
      ports = [ "${toString cfg.port}:8465/tcp" ];

      log-driver = "journald";
      extraOptions = [
        "--network-alias=ownfoil"
        "--network=ownfoil_default"
      ];
    };
    systemd.services."podman-ownfoil" = {
      serviceConfig = {
        Restart = lib.mkOverride 90 "no";
      };
      after = [
        "podman-network-ownfoil_default.service"
      ];
      requires = [
        "podman-network-ownfoil_default.service"
      ];
      partOf = [
        "podman-compose-ownfoil-root.target"
      ];
      wantedBy = [
        "podman-compose-ownfoil-root.target"
      ];
    };

    # Networks
    systemd.services."podman-network-ownfoil_default" = {
      path = [ pkgs.podman ];
      serviceConfig = {
        Type = "oneshot";
        RemainAfterExit = true;
        ExecStop = "podman network rm -f ownfoil_default";
      };
      script = ''
        podman network inspect ownfoil_default || podman network create ownfoil_default
      '';
      partOf = [ "podman-compose-ownfoil-root.target" ];
      wantedBy = [ "podman-compose-ownfoil-root.target" ];
    };

    # Root service
    # When started, this will automatically create all resources and start
    # the containers. When stopped, this will teardown all resources.
    systemd.targets."podman-compose-ownfoil-root" = {
      unitConfig = {
        Description = "Root target generated by compose2nix.";
      };
      wantedBy = [ "multi-user.target" ];
    };

    homelab.services.glance.monitorSites = [
      (mkGlanceMonitor {
        service = "ownfoil";
        icon = "di:nintendo-switch";
      })
    ];

    homelab.monitoring.targets = [
      (mkMonitoringTarget { service = "ownfoil"; })
    ];

    services.caddy.virtualHosts = mkCaddyVirtualHost {
      service = "ownfoil";
      port = cfg.port;
    };

    services.borgbackup.jobs.ownfoil = mkBorgJob {
      paths = "/var/lib/ownfoil";
      services = "ownfoil";
    };
  };
}
